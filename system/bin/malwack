#!/system/bin/sh

# === Configuration ===
HOSTS_FILE="/data/adb/modules/Malwack/system/etc/hosts"
TEMP_FILE="$(mktemp)"
LOG_FILE="/data/adb/malwack.log"
URLS_FILE="/data/adb/modules/Malwack/urls.txt"

# === Logging Function ===
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# === Abort on Error ===
abort() {
    log "Error: $1"
    exit 1
}

# === Restore Original Hosts File ===
restore_original() {
    log "Restoring the hosts file to its original state..."
    chmod 644 "$HOSTS_FILE" || abort "Failed to set permissions on $HOSTS_FILE"
    [ -f "$HOSTS_FILE" ] && rm -f "$HOSTS_FILE"
    echo "127.0.0.1 localhost" > "$HOSTS_FILE"
    echo "::1 localhost" >> "$HOSTS_FILE"
    chmod 644 "$HOSTS_FILE"
    log "Hosts file restored to its original state."
}

# === Block Pornographic Sites ===
block_porn() {
    log "Blocking pornographic websites..."
    HOST_URL="https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/porn-only/hosts"

    if curl -s "$HOST_URL" -o "$TEMP_FILE"; then
        cat "$TEMP_FILE" >> "$HOSTS_FILE"
        echo -e "$HOST_URL" >> "$URLS_FILE"
        chmod 644 "$HOSTS_FILE"
        log "Pornographic sites have been blocked in the hosts file."
        rm -f "$TEMP_FILE"
    else
        abort "Failed to download blocking hosts file from $HOST_URL."
    fi
}

# === Whitelist a Domain ===
whitelist_domain() {
    DOMAIN="$1"
    [ -z "$DOMAIN" ] && abort "Please provide a domain to whitelist."

    if grep -q "0\.0\.0\.0 $DOMAIN" "$HOSTS_FILE"; then
        sed "/0\.0\.0\.0 $DOMAIN/d" "$HOSTS_FILE" > "$TEMP_FILE"
        mv "$TEMP_FILE" "$HOSTS_FILE"
        chmod 644 "$HOSTS_FILE"
        log "Domain $DOMAIN has been whitelisted."
    else
        log "Domain $DOMAIN was not found in the hosts file."
    fi
}

# === Restore Default Hosts File ===
restore_default() {
    log "Restoring the hosts file to its default state with updates..."
    HOST_URL="https://raw.githubusercontent.com/Magisk-Modules-Alt-Repo/Malwack/main/system/etc/hosts"
    HOST_ONLINE_URL="https://raw.githubusercontent.com/Magisk-Modules-Alt-Repo/Malwack/refs/heads/main/urls.txt"
    TIMEOUT=60

    chmod 644 "$HOSTS_FILE"
    if timeout "$TIMEOUT" curl -s "$HOST_URL" -o "$TEMP_FILE"; then
        [ -f "$HOSTS_FILE" ] && rm -f "$HOSTS_FILE"
        cp "$TEMP_FILE" "$HOSTS_FILE"
        chmod 644 "$HOSTS_FILE"
        echo "$HOST_ONLINE_URL" > "$URLS_FILE"
        log "Hosts file restored to the default state and updated successfully."
        rm -f "$TEMP_FILE"
    else
        abort "Failed to download the default hosts file from $HOST_URL."
    fi
}

# === Display Help Menu ===
show_help() {
    echo "Usage: malwack [--restore[-original | -default] | --blockporn | --whitelist <domain> | --help]"
    echo "--restore-original: Restore the hosts file to its original state. (No blocking)"
    echo "--restore-default: Restore the hosts file to the module's default state & update it."
    echo "--blockporn: Block pornographic websites by adding entries to the hosts file."
    echo "--whitelist <domain>: Remove the specified domain from the hosts file."
    echo "--help: Display this help message."
}

# === Main Logic ===
case "$1" in
    --restore-original)
        restore_original
        ;;
    --blockporn)
        block_porn
        ;;
    --whitelist)
        whitelist_domain "$2"
        ;;
    --restore-default)
        restore_default
        ;;
    --help)
        show_help
        ;;
    *)
        echo "Invalid option. Use 'malwack --help' for usage information."
        ;;
esac